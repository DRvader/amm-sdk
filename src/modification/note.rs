#[derive(Clone, Copy, Eq, PartialEq)]
pub enum NoteModification {
  Accent,
  BrassBend,
  DetachedLegato,
  Doit,
  DoubleNoteTremolo { second_note: u8, relative_speed: u8 },
  DownBow,
  Falloff,
  Fermata { relative_duration: u8 },
  Fingernails,
  Flip,
  Glissando { ending_note: u8 },
  Golpe,
  Grace { acciaccatura: bool },
  HalfMuted,
  HarmonMute { open: bool, half: bool },
  Haydn,
  Heel,
  Marcato,
  Mordent { upper: bool },
  Open,
  Pizzicato,
  Plop,
  Portamento { ending_note: u8 },
  Schleifer,
  Scoop,
  Sforzando,
  Shake,
  SingleNoteTremolo { relative_speed: u8 },
  Smear,
  SoftAccent,
  Spiccato,
  Staccato,
  Staccatissimo,
  Stress,
  Tenuto,
  Toe,
  Trill { upper: bool },
  Turn { upper: bool, delayed: bool, vertical: bool },
  Unstress,
  UpBow,
}

impl std::fmt::Display for NoteModification {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    write!(
      f,
      "{}",
      match *self {
        NoteModification::Accent => String::from("Accent"),
        NoteModification::BrassBend => String::from("Brass Bend"),
        NoteModification::DetachedLegato => String::from("Detached Legato"),
        NoteModification::Doit => String::from("Doit"),
        NoteModification::DownBow => String::from("Down Bow"),
        NoteModification::DoubleNoteTremolo { .. } => String::from("Double-Note Tremolo"),
        NoteModification::Falloff => String::from("Falloff"),
        NoteModification::Fermata { relative_duration } => format!("{}x Fermata", relative_duration),
        NoteModification::Fingernails => String::from("Fingernails"),
        NoteModification::Flip => String::from("Flip"),
        NoteModification::Glissando { ending_note } => format!("Glissando to MIDI Note {}", ending_note),
        NoteModification::Golpe => String::from("Golpe"),
        NoteModification::Grace { acciaccatura } => format!(
          "{} Grace Note",
          if acciaccatura { "Acciaccatura" } else { "Appoggiatura" }
        ),
        NoteModification::HalfMuted => String::from("Half Muted"),
        NoteModification::HarmonMute { open, half } => format!(
          "{} Harmon Mute",
          if half { "Half-Open" } else if open { "Open" } else { "Closed" },
        ),
        NoteModification::Haydn => String::from("Haydn"),
        NoteModification::Heel => String::from("Heel"),
        NoteModification::Marcato => String::from("Marcato"),
        NoteModification::Mordent { upper } => format!("{} Mordent", if upper { "Upper" } else { "Lower" }),
        NoteModification::Open => String::from("Open"),
        NoteModification::Pizzicato => String::from("Pizzicato"),
        NoteModification::Plop => String::from("Plop"),
        NoteModification::Portamento { ending_note } => format!("Portamento to MIDI Note {}", ending_note),
        NoteModification::Schleifer => String::from("Schleifer"),
        NoteModification::Scoop => String::from("Scoop"),
        NoteModification::Sforzando => String::from("Sforzando"),
        NoteModification::Shake => String::from("Shake"),
        NoteModification::SingleNoteTremolo { .. } => String::from("Single-Note Tremolo"),
        NoteModification::Smear => String::from("Smear"),
        NoteModification::SoftAccent => String::from("Soft Accent"),
        NoteModification::Spiccato => String::from("Spiccato"),
        NoteModification::Staccato => String::from("Staccato"),
        NoteModification::Staccatissimo => String::from("Staccatissimo"),
        NoteModification::Stress => String::from("Stress"),
        NoteModification::Tenuto => String::from("Tenuto"),
        NoteModification::Toe => String::from("Toe"),
        NoteModification::Trill { upper } => format!("{} Trill", if upper { "Upper" } else { "Lower" }),
        NoteModification::Turn {
          upper,
          delayed,
          vertical,
        } => format!(
          "{} {}{}Turn",
          if upper { "Upper" } else { "Lower" },
          if delayed { "Delayed " } else { "" },
          if vertical { "Vertical " } else { "" }
        ),
        NoteModification::Unstress => String::from("Unstress"),
        NoteModification::UpBow => String::from("Up Bow"),
      }
    )
  }
}
